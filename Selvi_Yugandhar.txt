Day 1 (18/07/2024)
* Eclipse basic
	* disadvantages of accessing and running a file using cmd promt
	* Eclipse is a 
		* Editor tool
		* it gives us a simple but advanced UI to view, edit and run our files in a very easy way.
		
*************************************************************************
Day 1 (19/07/2024)

Taluk office - class
rooms - methods/functions

Reception related things(table, phone, receptionist, computer) - static - belongs to the class

Paper, pen, water can, water bottle, table, chairs, chalan - anyone can access - public
Receptionist mobile, person's mobile/money/bike - private
Documents - protected
People - default

Access Modifier - public, private, protected and default

Variables
    10 people/chair/table or 20 people/chair/table or 5 people/chair/table
	- (10, 20 and 5)- variable values
	- people/chair/table - type- datatype
	- red table, red chairs or white chairs - naming - variable name

chair red = 30;
	Chair - datatype
	red - variable name 
	30 - variable value 
public chair red = 20;
private chair red = 2; 

VARIABLE COMMON SYNTAX 
	accessModifer datatype variableName = variableValue;


Method - room
	* Whatever happens inside is not visible to outside or other methods/rooms
	* We can bring things from reception/hall to a method
	* But we can not bring a thing from method/room to outside. In order to do that, we need to follow a process
		- RETURN TYPE
	* Most of the time method wont give us anything - VOID

METHOD COMMON SYNTAX 
	- AccessModifer returnType methodName() { }
	- public void incomeTaxCertificateProcess() {
		
		}

Taluk office - Class
	- It does a set of works
	- Methods are written inside a class

CLASS COMMON SYNTAX 
	- AccessModifier class(keyword) ClassName { }
	- public class TalukOffice {

		}
	
public class TalukOffice {
                                     
public chair red = 20;
private chair red = 2;      

	- public void incomeTaxCertificateProcess() {
		
		}
	- public void MarriageCertificateProcess() {
		
		}

public chair red = 20;
private chair red = 2; 

	- private void staffRoom() {

		}
	- protected void importantDocumentsRoom() {

		}

public chair red = 20;
private chair red = 2; 
	
}

* incomeTaxCertificateProcess - camelCase
	- class names should start with CAPITAL LETTER and followed by camelCase
	- method names should start with SMALL LETTER and followed by camelCase
	- all the java keywords starts with SMALL LETTER such as class, public, void etc.


People administration - package
Chennai Taluk office - Class - parent class
	below are sub classes of Chennai Taluk office 
	- Velachery Taluk office - Class 
		- Velachery east Taluk office - Class (He is sub class of Velachery class)
	- Tambaram Taluk office - Class
	- Guindy Taluk office - Class 

Chennai Taluk Office - Parent class
Velachery Taluk Office - Parent class
Velachery East Taluk Office - Child class 

VelacheryTalukOffice extends ChennaiTalukOffice { }
VelacheryEastTalukOffice extends VelacheryTalukOffice { }

We need someone or some office to create rules so that by using that every taluk office will work
For that, in Java, we use interface 

We create rules in interface
COMMON SYNTAX FOR INTERFACE 
	- AccessModifier interface(Java keyword) InterfaceName { }
	- public interface PeopleAdministrationRules {
	
	}

**************************************************************
Day 3 (20/07/2024)


public interface PeopleAdministrationRules {
	
	public void incomeCertificateProcess();

	public void marriageCertificateProcess();
	}

public interface ChennaiEastPeopleAdminRules { 
	}


public interface ChennaiNorthPeopleAdminRules extends PeopleAdministrationRules { 
	}

public class ChennaiTalukOffice implements PeopleAdministrationRules {

}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

ChennaiGovtHospital conducts medical camp inside the campus - This event equal to Object Creation or Object Initiation or Object Instantiation in Java

ChennaiGovtHospital MedicalCamp = new ChennaiGovtHospital
ChennaiGovtHospital BloodDonationCamp = new ChennaiGovtHospital
ChennaiGovtHospital EyeTestCamp = new ChennaiGovtHospital

public class ChennaiGovtHospital {
	ChennaiGovtHospital MedicalCamp = new ChennaiGovtHospital();
}

public class ChennaiPoliceStation { 
	ChennaiGovtHospital MedicalCamp = new ChennaiGovtHospital();
}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Medical camp conducted by ChennaiGovtHospital is managed by a Clerk

This Clerk is equal to "CONSTRUCTOR" in java
	ChennaiGovtHospital MedicalCamp = new ChennaiGovtHospital();
		- ChennaiGovtHospital - Constuctor

CONSTRUCTOR COMMON SYNTAX 
	- AccessModifier ClassName() { }
	- public ChennaiGovtHospital() { 
		}

1) Constructor do not have return type;
2) Constructor name should be as same as Class Name;
3) By default, each class has its own Constructor and we call it as DEFAULT CONSTRUCTOR;


Methods
static
Class
Access Modifier
Variables 
Package
Project
Interface
Object Creation
Constructor

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


Project Structure 

Project
    sourceFolder
	- package1
		InterfaceA
		InterfaceB
		ClassA (Datatype/variables/methods)
			ClassAA 
			ClassAB
		ClassB
		ClassC
	- package2
		ClassA
		ClassB
		InterfaceC
	- package3
		ClassX
		ClassA

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

* Class - It does a set of work. It consist of variables and methods. Each work would be done by methods. 

* Methods - It does specific job. It always written inside a class

* Variable - it can have type(Data type) and posses a number or name;
			variables can have different access - access Modifier
			
* Access Modifier - defines where we can use a variable/method/class

* Interface - It contains rules most of the time. Sometimes it does some work too(means method).
			Interface is always followed by class/classes. 
			When class follows interface, class should do the rule written in the interfacebject

* package - contains class/classes/interface/interfaces/file/files/folder/folders

* Project - consist of package/packages/file/files/folder/folders/source(src)folder

* static - static means belongs to the class. If govt hospital is class, then hospital receptionist is a static member of that class. 
                 We can not seperate them. variables and methods can be static
			within a class - static can be used anywhere directly in the same (in a static method or in non-static method)
			Outside class - static can be used but alone with class name. (in a static method or in non-static method)

* Object (instantiation or initiation)  - E.g: Medical camp; 
			We create Object only for classes; Whenever we create object we copy whatever the class contains(except static)
			means, only non-static is copied
			Through object we can not call static things.

* Constructor - Object creation happens with the help of constructor
				constructor is available in different kind
				1. without any money/permission
				2. only with money
				3. only with permission
				4. with both money and permission


*************************************************************

Day 4 (21/07/2024)

*****https://www.shellhacks.com/git-create-new-branch/****

Git basics

* helps to work on a same file by multiple person. 
* SCM - Source code management 

Original project is in our system, we use Eclipse to view and edit the project in easy manner

Git Repository - Repo- Remote - Remote project

1) Create a Java project 
2) Add some packages and classes and some files 
3) In github.com, create a repository
4) In File explorer, go to your Java project 
5) From there open git bash andd type below commands
	* git init -- it will create a local git with master branch
	* git add .
	* git commit -m "some messages"
	* git remote add origin "repository's SSH path" - we are introducing online repository to local git 
	* git push origin master
	* git status
	
	* git config --global user.email "";
	
	
**********************************************************
Day 5 (22/07/2024)

Maven - Dependencies management tool

	* Difficulties in adding a .jar file into our project
	* .M2 folder stores the dependencies added in pom.xml file
	* Maven projects gives us a proper project structure
	
resolution:-
	* Instead of Java project, create a maven project
	* All maven project consist pom.xml file
	* In pom.xml file, we add the required dependencies
		* groupId
		* artifactId
		* version
		* scope (optional)
	* Eg:-
		OnePlus - GroupID 
		Mobile - ArtifactID
		OnePlus11R - Version
	* Eg:-
		GroupID - selenium.org
		ArtifactID - selenium-java
		version - 4.20.1
		
* Home work
	* Create Maven project
	* push to git repo using git bash
	* delete project from your system
	* By using eclipse import the project directly from git(without RSA)
	* Add RSA and then import directly from git
	* Download the project from 
		* https://github.com/SathiyamoorthiMurugesan/ABC
		* Import this project into eclipse
		
************************************************************************************

Day 6 (23/07/2024)
		
Different ways to import a maven project into Eclipse 
	* clone the project using git bash and import the existing project into Eclipse 
	* clone the project using eclipse and followed by import the existing project into Eclipse
	* clone the project in git perspective and import the existing project into Eclipse
	* download the project into your local and import the existing project into Eclipse
	
* What is .gitignore file and how it works 

* How to access build path of a project

* How and why to update the maven project

* Run as 
	* Maven clean
	* Maven install
	
* In src/main/java
	* We keep development related files
* In src/main/resources
	* We keep utility files which is being used in development files
* In src/test/java
	* We keep test case files
* In src/test/resources
	* We keep utility files which is being used in test cases

* Create a Maven project, push it into Git and add collaborators

************************************************************************************

Day 7 (24/07/2024)

Class - important thing, through which we perform some task. Class may contains methods and variables

Method1 - A work
Method2 - B work
Method3 - C work ( A work + some other work = method1 + some other work)

redundant - repeatable 
reuse
No. of line will reduce 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Variables

Variables - shape and count/name
shape - datatype 



Syntax:-
	AccessModifier datatype variableName = variableValue
	public int a = 10;
	private String b = "xyz";
	
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Datatype: Its a classification of a data, which tells the compiler or interpreter 
about how the programmer intends to use the data.

1) Primitive
	a) boolean - yes or no OR true or false 
		* boolean aa = true; --> Variable declared and initialized
		* boolean ab;  --> Variable declared but not initiated.
			- default value will be assigned to ab is "false";
	
	b) Textual 
		1) char - a, b, c, A, B
			* char ba = 'a';
			* char bb = '1';
			* default value of char is null;
		2) byte - 
			byte x = 10;
	c) numeric 
		1) int 
			* int cc = 10;
			* default value = 0;
		2) short
			* short dd = 20;
			* default value = 0;
		3) double
			* double ee = 30d;
			* default value = 0;
		4) long
			* long ff = 20l;
			* default value = 0;
		5) float
			* float gg = 2.5f;
			* default value = 0;

2) Non Primitive
	d) String - In java, String is a Non-Primitive data type but at the same time its a Class.
		* String hh = "aA10@";
		* String ii = "In java, String is a Non-Primitive data type but at the same time its a Class.";
		* String jj = "null";
		* default = null;
	e) array
	
int a; - declare
a = 10; - define/initiate/assign
int a = 10 - declare and initiate

int a = 10;
int - data type( primitive --> numeric)
a - variable/variableName;
10 - value posses by the variable/ value pointed by the variable

If you want 10, you need to call 'a' only. 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


Variables - Its a memory location that can hold values of a specific datatype.

Types of variables 
1. Local variable - 
	* Datatype declared/initiated within a method/constructor, for, if    -- block ({...})
	* scope of local variable is only within the block in which the variable is declared
	* initialization of local variable is mandatory
	* local variables can not be static
	{
	int a = 10;
	char c;
	c = '2';
	String sathya = "10";
	static int b = 10; -- we can not create like this.
	}
	
2. Instance variable/class variable/non-static variable
	* Declared within a class but outside of a block ({...})
	* Non- static variables
	* To access instance variables, we need to create object for that class
	
	classA {
	int a = 10; //class level non static variable
	String sathya = "10"; //class level non static variable
	
	method1() {
	int  aa = 10; // local variable
	
	sysout(sathya); // we can not use a non static like this. we need to create object
	// it should be written as 
	ClassA obj = new ClassA(); //object creation
	sysout(obj.a);
	}
	
	}
	
	
3. static variable
	* Declared within a class but outside of a block with "static" keyword
	* static keyword is used with variables and methods
	* To access this variable, dont need to create an object
	* within a class - static can be used anywhere directly (in a static method or in non-static method)
	* Outside class - static can be used but along with class name. (in a static method or in non-static method)
	
	static int a = 10;
	static String sathya = "10";
	public static int c = 200;
	
ClassA (TalukOffice) {

static int a = 10;
//a = receptionist;

method1() {
	print (a);
}

}


ClassB (Govt hospital) {

method2() {
print (ClassA.a);
//print (TalukOffice.receptionist)
}


***********************************************************************

Day 7 (27/07/2024)

Access Modifier
	* It defines where and who can use a method/variable/class
	1) default
	2) private
	3) protected
	4) public 
	
	Syntax = accessModifier dataType variableName/variable = variableValue (Could be local variable or non-static variable)
		   = static accessModifier dataType variableName/variable = variableValue (class level variable or static variable)
		   
	int a = 10; - default (no need to mention "default" word
	private int a = 10;
	protected int a = 10;
	public int a = 10;
	
	
	packageA
		classA ( int a = 10)
			ClassAA (same package of ClassA and sub class of ClassA)
		classB (same package but non sub class of A)
	packageX
		classX (diff package non sub class of ClassA)
		classXA (diff package but sub class of A)
		
	
How ClassA and other Classes can use variable 'a' based on its access modifier.

                                     | default |  private  | protected  | public 
									 |         |           |            | 
classA ( int a = 10)                 | yes     | yes       | yes        | yes
									 |         |           |            |
same package but sub class           | yes     | no        | yes        | yes 
									 |         |           |            |
same package but non sub class       | yes     | no        | yes        | yes
									 |         |           |            |
different package but sub class      | no      | no        | no         | yes
									 |         |           |            |
different package but non sub class  | no      | no        | no         | yes

ClassA {

int a = 10;
private int b = 100;
protected int c = 20;
public int d = 15

method1() {
ClassA obj = new ClassA();
print (obj.a); 
print (obj.b);
print (obj.c);
print (obj.d); 
}

}

ClassAA following ClassA {
or
ClassAA extends ClassA {

ClassA obj = new ClassA();
method1() {
print (obj.a); 
print (obj.b);
print (obj.c);
print (obj.d); 
}
}

ClassB {

ClassA obj = new ClassA();
method1() {
print (obj.a); 
print (obj.b);
print (obj.c);
print (obj.d); 
}
}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

JVM, JRE, JDK

our codes - English - .java
compile - .class - byte code (machine recognizable language). 
			it is available in target folder.


JVM - Java Virtual Machine 
* This can not be seen
* it starts the execution(creates Runtime Environment)
* It first checks for main method
* It creates the code flow, in java the flow is called "Thread" 
* JVM provides run time environment in which Java byte codes can be executed
* loads code| verifies code| execute code| provides run time environment

JRE - Java Runtime Environment
* Physically exist
* Contains JVM and set of libraries
* JVM uses these libraries to execute the codes

JDK - Java Developement kit
* It contains JVM, set of libraries and dev tools (JRE + dev tools)
* Used to develop and execute the codes
* Dev tools + debugger + compiler + java doc

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Java keywords
new, class, interface, abstract, access modifiers, data types, static, this, super, throw, throws, try, 
catch, final, finally, data type, if, for, while, break, continue, switch, case;

* dont create variables and method names using java predefined keywords 
* Java is case sensitive language (Sathya, sathya)

Naming conversion in java
* Should not use above things
* homepage - homePage (Camel case)

If you are creating package, method name
* should start with small letter followed by camel case

if you are creating class or interface
* should start with Captial letter followed by camel case

thisIsPackageName 
ThisIsClassName
ThisIsInterfaceName

thisIsMethodName
thisIsObjectName or ThisIsObjectName
thisIsVariableName

package, method, object, variable - starts with small letter
Class, Interface, Object - starts with Capital letter


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Methods in Java

1) main method (static method)

2) static method
3) non static method

4) method with parameter
5) method without parameter

6) method with return type
7) method without return type

Currently we focus on 2 & 3;

public void method1() {

}

public static void method2() {

}

**** Using local variable outside the method**********

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Calling one method from another method

* How calling a method differentiate within a class or outside class

With in a class
1. calling static method/variable from non-static method - direct call
2. calling static method/variable from static method - direct call
3. calling non-static method/variable from non-static method - direct call or object creation
4. calling non-static method/variable from static method - Object creation 


Outside class
	1. calling static method/variable from non static method - using className
	2. calling static method/variable from static method - using className
	3. calling non-static method/variable from non-static method - Creating Object
	4. calling non-static method/variable from static method - Creating Object 
	
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Object creation - to call non-static members

Within class we can have both static and non-static member. 

1) We create object only for class.
2) In order to access non static members of a class, we create object and access the methods and variables

Objection definition - Whenever we create an Object for a class, whatever non-static members(methods and variables) present in that class 
				will be copied and stored in heap memory. We call non-static members through Object creation only.
				
**********************************************************************

Day 8 (28/07/2024)

What is heap memory? 

Memory Management

Heap memory
Stack memory
SCP (String Constant Pool - A part of heap memory)

ClassA obj1 = new ClassA();

ClassA - Reference Class Name
Obj1 - Object variable
new = key word to create an obj
ClassA() - Constructor or Object creation or instance creation

* Whenever we create an object for a class, whatever non-static variables and methods present in that class will be copied to heap memory
* Object variable or instance variable, is stored in stack memory 
* We can create multiple object for a single class

public class ClassA {

int a = 10; 

public void method1() {
	ClassA obj1 = new ClassA();
	sysout(obj1.a);
	
	ClassA obj3 = new ClassA();
	ClassA obj4 = new ClassA();
}

public void method2() {
	ClassA obj2 = new ClassA();
	sysout(obj1.a);
}

}

	stack memory			Heap memory
	obj1.				a = 10; method1(), method2();
	obj2				a = 10; method1(), method2();
	obj3				a = 10; method1(), method2(); 
	
	* In heap memory, only one copy of every class is available if you create multiple object 
		for that class. So that we can save the memory space in heap memory.
	
	
public class ClassA {
int a = 10;
}

int a = 10; //class level non static
* a = 10 - When it comes to variable,  the variable and its value, 
				both will be stored in specific stack memory 

SCP:- String constant pool
There are two ways to create String in Java
1. String Literals
2. Object creation

String Literals
	String Sathya = "1000"; 
	
Sathya - Stack
1000 - SCP of Heap memory 
	
Object creation for String
	ClassA obj1 = new ClassA(); //its simple object creation
	String Sathya = new String("1000"); //parameterized object creation

Sathya - Stack memeory
1000 and methods/variables in String class - Heap memory 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

*****We will see it later******

String immutable:-

String str = "Sathya";
String str1 = "Sathya";
String str2 = "Ranjith";

In Memory it looks like
stack 		SCP
str			Sathya 
str1 		
str2 		Ranjith

str1 = str1 + str2;
str1 = SathyaRanjith

After manipulation what we think
stack 		SCP
str			SathyaRanjith
str1 		
str2 		Ranjith

But what really happens in SCP memory.
Whenever we manipulate String variable, String value never get changed. 
Simply a new value is assigned to the manipulated String variable.

stack 		SCP
str			Sathya
str1 		SathyaRanjith
str2 		Ranjith

str = str1 + str2;

In SCP, after manipulation

stack 		SCP
str			SathyaRanjithRanjith ("Sathya" - will be in SCP but no one is looking for him)
str1 		SathyaRanjith
str2 		Ranjith

Unused Object "Sathya" in the memory will be cleared after sometime by Java Garbage collection process

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Data types as variables:-
Variables in Java

Based on where we create our data types or variable names, we categories variables in 3 types 

1. Local variable
2. Class level or instance variable or non-static variable
3. static variable

Variables as parameters 
Variables as return type

Class/interface/Object/Collection as parameter
Class/interface/Object/Collection as return type

and its example from Java and Eclipse


**********************************************************************

Day 9 (29/07/2024)

Constructor basics

Final variable
	* Usage of Constructor in Final variable
	
**********************************************************************

Day 10 (30/07/2024)

String basics
String immutable 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

TOPICs WE LEANRED TILL NOW

Class
Interface
Access Modifier
static
Method
	static or non-static 
	parameter or without parameter
	return type or without return type
Data type - Variables
	Local Variable
	Non static variable
	static variable
Object Creation
Constructor
Final variable
String basic

**********************************************************************

Day 11 (31/07/2024)

Interface in detail

**********************************************************************

Day 12 (1/08/2024)

Abstract class 

**********************************************************************

Day 13 (3/08/2024)

OOPs concepts
	* Encapsulation
	* Abstraction
	* Inheritance in detail
	
**********************************************************************

Day 14 (5/08/2024)

Polymorphism in detail
	Overloading
	Overriding
	
**********************************************************************

Day 15 (6/08/2024)

Constructor in details

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Keywords in Java

static
final

**************************************************************************
	
Day 16 (7/08/2024)

super, this, super() and this();

Understanding System.out.println();

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Blocks in Java
static 

try catch block - before that we need knowledge on Error and Exception.

********************************************************************

Day 17 (8/08/2024)

Exception in detail! 

***************************************************************

Day 18 (9/08/2024)

How to local variable value outside of a method
	* By return type
	* By assigning local variable value to class level variable

Getters and setters

***************************************************************

Day 19 (10/08/2024)

If loop
Basic for loop
Switch condition

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

throw, throws and throwable

Scanner class

*****************************************************************

Day 20 (12/08/2024)

For loop patterns

Debug

How to write dynamic/generic methods

*****************************************************************

Day 21 (13/08/2024)

array

for each

*****************************************************************

Day 22 (15/08/2024)

Multi-Dimentional array
Jaggered array
Arrays class

String class and its methods

**********************************************************************

Day 23 (19/08/2024)

array interview 
1) sort

String interview questions practice

1) reverse a string - 3 technique
2) count total words  in a sentence
3) reverse each words in a sentence
4) count each words/letters in a sentence or word respectively


**********************************************************************

Day 24 (20/08/2024)

Collection overview
Wrapper classes
Thread overview
StringBuilder and StringBuffer

Collection hierarchy in detail

**********************************************************************

Day 25 (21/08/2024)

Arraylist and HashSet in detail

**********************************************************************

Day 26 (22/08/2024)

HashMap in detail

**********************************************************************

Day 27 (26/08/2024)

How to read property file

* File name with extn: abc.properties
* key value pair 
	* Both key and value are String
* name = Sathya
* Age = 32



Home work

How to read excel and CSV file
	1) Excel file reading using apache POI API
	2) Excel file reading using fillo API
	
How to work with APACHE POI API
* File location - 
* file name
* file extension - .xls, xlsx - workbook
* sheet name 
* row and column 
	th - header
	tr - row
	td - data 

* getStringCellValue();
* getNumbericCellValue();

* How to get entire row values
	Header: column
	Name: Sathya
	Company: TCS
	
S.no Name Age Company Experience
1 Sathya 32	TCS	12

How to work with Fillo API
	* SQL (basic select)
	
	
	3) Create a file using Java
	4) Delete a file using Java
	
******************************************************************

Day 28 (27/08/2024)

* What is functional Testing
* What is regression testing
* Where do we need the automation most? Regression.



What is window based or mac based application
What is Web-Application

What is browser - Basic functionalities in browser 
What is Web-Based application
	* What are the basic operation 
	* What is elements
	



Selenium Basics

Why we need automation - saves Time and Man power
Benefits
Different Automation tools and Editor
Automation tools 
	* Selenium
	* UFT (QTP)
	* PlayWrite
	* RPA - Robotic process automation
	
Editor 
	* Eclipse
	* STS - Sprint Tool Suite
	* InteliJ
	* Visual Studio
	
Front end development tools and backend application tools

Front End:
	* HTML
	* CSS
	* Java, JavaScript
	* Angular JS
	* .Net
	
Back End
	* Java/JavaScript/Angular/.Net
	* Database management
	* Cloud
	* Source Code Management tools (SCM) - Git, Bit Bucket, AWS, Azure

Difference between Web Browser and Web application
	Web Browser
		* Chrome
		* Edge
		* Firefox
		* HTML Browser
		* headleass browser
	Web application
		* Facebook
		* Flipkart
		* HDFC website
		* Jira
		
What and all we see in a browser
	* URL bar
	* Minimize button
	* Maximize button
	* New tab
	* Close 
	* New window
	* Forward
	* Backward
	* Refresh
	
* what are the actions we do on a browser

browser open
url enter
new tab open
tab close 
min 
max
entire browser close
scroll
zoom
navigate - back, forward, refresh

With in application what do we do

application launch - url type
text enter
button click
check box click
radio box click
drop down
links click
Text read/verify
Tab title
Mouse hover
double click
Right click
Date choose
Drag and drop
File upload
Verification/Assert 
page load speed/time(synchronization)
Keyboard
pop up
	alert
	tab
	web alert like info screen
	Desktop window
frames
wait
WebTable

		
What and all we see in a web application (Textbox, checkbox, drop down, button, radio button, link, text, image, video,..etc)
What are the actions we do in an application (click, write, drag and drop, scroll)

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

* In manual testing, we do the testing 
* In Automation, who would work as a tester - WebDriver

WebDriver - interface

* WebDriver is nothing but us(TESTERs).
* The main properties of a browser are created as methods inside WebDriver interface


get(String url)
  * In this method only we pass application URL
getCurrentUrl()
	* It gives currently focused window's URL. So that we can validate against requirement that, URL is correct 
close()
 	* Closes the currently focused window
quit()
	* Closes all the window's opened during the session
getPageSource()
	*  

@override
findElement()
findElements()

getTitle()
	* Gives the title of the window (tab tile) 
getWindowHandle()
	* It gives current window's handle
	* Its good practice to use getWindowHandle() method, before using getWindowHandles() method
	* This methods return type is String
	
getWindowHandles()
	* It gives all window's handles opened during that session
	* This methods return type is Set<String>


TargetLocator switchTo()
	WebDriver frame(int index);
	WebDriver frame(String nameOrId);
	WebDriver frame(WebElement frameElement);
	WebDriver parentFrame();

	TargetLocator TL = WebDriver.switchTo();
	TL.frame(0);
	
	WebDriver.switchTo().frame(0);
	
	1) find the frame - means identify the element for the frame
		- we can identify the frame using 3 things.
			1. using index
			2. frameName
			3. by finding element for the frame
	2) switchTo().frame()
	3) do some action on any element inside the frame 
	4) switchTo().defaultContent();
	
	
	WebDriver window(String nameOrHandle);
		****WebDriver.switchTo().window();*******
		
		String parentWindowHandle = WebDriver.getWindowHandle();
		Set<String> allWindowHandles = WebDriver.getWindowHandles();
		for(String eachWindowHandle : allWindowHandles) {
			if(!eachWindowHandle.equals(parentWindowHandle)) {
				WebDriver.switchTo().window(eachWindowHandle);
				}
			}
		
	WebDriver newWindow(WindowType typeHint);
	WebDriver defaultContent();
	WebElement activeElement();



	Alert alert();
		dismiss();
		accept();
		getText();
		sendKeys();
		
switchTo().frame()
switchTo().window()
switchTo().alert()
switchTo().newWindow()


TargetLocator TL = WebDriver.switchTo();
	Alert al = TL.alert();
	al.accept();
	
	WebDriver.switchTo().alert().accept();
	

switchTo().alert().dismiss();
switchTo().alert().accept();
switchTo().alert().getText().toUpperCase();

WebDriver methods 

Navigation navigate();
	* back()
	* forward()
	* to(String url)
	* to(URL url)
	* refresh()
	
WebDriver.navigate().back();
WebDriver.navigate().to("www.faceBook.com");
	
Options manage()
	* Timeouts timeouts()
		* implicitWait()
	* Window window()
		* setWindow()
		* maximize()
		* minimize()
		* fullScreen()
	* getCookies()
	* deleteCookies()
	
	
	Options opt = WebDriver.manage();
	TimeOuts TO = opt.timeouts();
	TO.implicitlyWait(Duration abc);
	
	WebDriver.manage().timeouts().implicitlyWait(Duration);
	
	
	Window Wo = opt.window();
	Wo.maximize();
	
	WebDriver.manage().window().maximize();
	
	
	opt.getCookies();
	
******************************************************************

Day 29 (28/08/2024)
	
	
What is WebElement 
	* It is a interface which follows SearchContext (In Java)
	* Whatever element you see on a web page is called WebElement (For understanding)
	
click();
submit();
sendKeys();
clear();
getTagName();
getDomAttribute();
getAttribute();
isSelected();
isDisplayed();
isEnabled();
getText();
findElement();
findElements();
getLocation();
getSize();
getRect();
getCssValue();

Hirarchy 
* SearchContext Interface (findElement, findElements)
* WebDriver Interface ( Basic methods for a browser) 
* RemoteWebDriver Class( all basic methods are implemented here)
* Classes ChromeDriver, FirefoxDriver, etc.. 


interface SearchContext {

}

interface WebDriver extends SearchContext {

}

class RemoteWebDriver implements WebDriver {

}

class ChromeDriver extends RemoteWebDriver {

}


********************************************************************

Day 30 (31/08/2024)

Whatever element you see on a web page is called WebElement

What is WebElement
	* DOM (right click on a page and inspect or F12 or Ctrl+Shift + I)
	
	* diff types of tags
		* html
		* body
		* header
		* input
		* div
		* ul
		* li
		* a 
		* svg
		* select (drop down)
		* frame or iframe (small html)
		* table
			* th 
			* tr
			* td
			
		* <table>
			<div>
				<tr>
					<th>
					<th>
					<th>
				<tr>
					<td>
					<td>
				<tr>
					<td>
					<td>

* attributes
	whatever key value pair we see inside any tag is called attributes
	
	<div> - start tag
	
	</div> - end tag
	
	<div key1 = "val1" key2 = "val2" > - start tag
	"text" 
	</div>
	
	where
	div - tagName
	key1, key2 - attributes
	val1, val2 - attribute's value
	"text" - tag's display name

How to find element in a page 

<html>

ancestor(div)
  parent(div)
	parent(ul)
		child(li)
			child(select)
		child(ul)
			child(li)
			child(li)
	parent(ul)
	parent(li)
ancestor(div)
	parent(div)
		child(div)
</html>

ancestor
parent
child
siblings
following ancestor, parent, child, siblings
preceding ancestor, parent, child, siblings
text
contains(text, 'Sathya')

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

We find elements in a page using locators 

Locators in selenium - 
	locator value should not be duplicate. must be unique
		means, id = "sathya" should be present only once

id 
	* most preferred 
	* do not use if it has numbers in it. 
	* id = "abc123"; - DO NOT USER
		* if we reload again, the id value may change to "abc114"
name
className
	* with more spaces 
tagName
linkText
partialLinkText
CSS selector
xpath -XML path


id, name, className(class) - when these values are unique we can use them directly. When they are not unique, we use either xpath or CSS

findElement(By.id(""));
findElement(By.name(""));
findElement(By.class(""));
findElement(By.linkText("selenium"));
findElement(By.linkText("Testing Frameworks"));
findElement(By.linkText("Logging Frameworks"));
findElement(By.parialLinkText("Frameworks"));


	By obj1 = By.className("");
		WebElement ele = driver.findElement(obj1);
		ele.click();
		
		driver.findElement(By.className("")).click();;
		
		driver.findElement(By.id("")).sendKeys();

* when id, name, className attributes are present in an element tag but they not unique, then we go to xpath 
* When id, name, className attributes are not present inside an element's tag, then also we use xpath

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

XPath

XPATH - xml path

two types of xpath

1) absolute xpath - like using steps 
	* single slash - /
	* full path need to written - from html
	* /html/body/nav/div/div/ul[1]/li[1]/span

	* If there is a change in UI, the above order will change and we can not find our desired element 
		using the above xpath. 
	* So using this xpath is  NOT RECOMMENDED.
	
2) relative xpath - like using lift
	* double slash
	* No need to write full xpath
	* need to write the xpath for the given element 
	
Types in relative xpath:

crocs.in

* Basic syntax
		//tagName[@attribute = 'value']
		(//span[@class='menuLink-title-J7d'])[1]
		(//*[@class='menuLink-title-J7d'])[1]
		
		https://chromedriver.storage.googleapis.com/index.html?path=114.0.5735.90/
		//a[@href = '/index.html']
		driver.findElement(By.xpath("//a[@href = '/index.html']"));
		
		//a[@href = "/index.html"]
		driver.findElement(By.xpath("//a[@href = "/index.html"]"));
		driver.findElement(By.xpath("//a[@href = /"/index.html/"]"));

* text
//tagName[text() = 'value']

* contains 
	//tagName[contains(text(), 'value')]
	//tagName[contains(@attribute, 'value')]

* and 
//span[text() = 'Women' and @class='menuLink-title-J7d']

* or 
//span[@std ='first' or @class='menuLink-title-J7d'] 

//span[text()= 'Classic Crush White Unisex Clog']

//span[contains(text(), 'Classic Crush White Unisex Clog')]


//a[@class = 'item-name-suo']/span[contains(text(), 'Classic Crush White Unisex Clog')]

//tagName[contains(@attribute, 'value')]

following
following-child
following-parent
preceding
preceding-child
preceding-parent
ancestor


//tagName[@attribute = 'value']//following::tagName

When element is not found - we get elementNotFoundException

Why element is not found, because we wrongly identified the element
1) spelling mistake
2) flow mistake
3) xpath wrong

StaleElementException
	* Element is available in DOM but not visible in UI
		
https://www.guru99.com/xpath-selenium.html#text
https://www.guru99.com/locators-in-selenium-ide.html


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Practice - "https://www.geeksforgeeks.org/machine-learning-mathematics/?ref=dhm"

//div[text() = 'value']

//div[contain(text(), 'value')]

List<WebElement> allLink  = WebDriver.findElements(By.tagName("//a"));

for(WebElement each: allLink) {
each.click();
}


List<WebElement> titleHeaders  = WebDriver.findElements(By.xpath("//ul[@class='header-main__list']/li/span"));

for(WebElement each: titleHeaders) {
each.getText();
}

public void validateHeaders(String headerName) {

List<WebElement> titleHeaders  = WebDriver.findElements(By.xpath("//ul[@class='header-main__list']/li/span"));

for(WebElement each: titleHeaders) {
if(each.getText().equalsIgnoreCase(headerName) {
	syso("Given header "+headerName+" is present);
}
else 
	
}

}

public void clickGivenHeader(String headerName) {

List<WebElement> titleHeaders  = WebDriver.findElements(By.xpath("//ul[@class='header-main__list']/li/span"));

for(WebElement each: titleHeaders) {
if(each.getText().equalsIgnoreCase(headerName) {
	each.click();
}
	
}

}

*********************************************************************************

Day 31 (01/09/2024)

XPath real time practice with Amazon website


**********************************************************************

Day 32 (03/09/2024)

How to use selenium in Eclipse 
1. We have add selenium dependency in our project
 

Hirarchy 
* SearchContext Interface (findElement, findElements)
* WebDriver Interface ( Basic methods for a browser) 
* RemoteWebDriver Class( all basic methods are implemented here)
* Classes (ChromiumDriver)ChromeDriver, (GeckoDriver)FirefoxDriver, (ChromiumDrier)MS Edge,  etc.. 

** WebElement interface (Basic action on webElement methods)


interface SearchContext {

}

interface WebDriver extends SearchContext {

}

class RemoteWebDriver implements WebDriver {

}

class ChromeDriver extends RemoteWebDriver {

}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

RemoteWebDriver

System.setProperty("webdriver.chrome.driver", "C:\\Users\\LENOVO\\git\\SaraswathyJavaProject\\drivers\\chromedriver_107.exe");
ChromeDriver driver = new ChromeDriver();

But we do not need to create object like above.
Because it will cause a problem when we need to open different browser in single driver instance

To avoid this we keep WebDriver interface as reference for object

WebDriver interface and ChromeDriver/FirefoxDriver/SafariDriver/EdgeDriver are connected through RemoteWebDriver class

All the methods in WebDriver interface are implemented in RemoteWebDriver.

All browser drivers are extended to RemoteWebDriver

WebDriver driver; 
driver = new ChromeDriver();
driver = new FirefoxDriver();

{ 

ChromeDriver driver = new ChromeDriver();

code

driver = new EdgeDriver();

EdgeDriver driver1 = new EdgeDriver();

WebDriver driver = new ChromeDriver();

driver = new EdgeDriver();
driver = new FireDriver();

}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Who is brower? 

Browsers
* Chrome
* Firefox
* MS edge
* Opera Mini
* UC browser
* HeadlessBrowser

How they used browser in Selenium 



Diff between Chrome browser and Chrome driver 

	We have to use specific driver for specific version of a browser
	
chrome - ChromeDriver - we need to download chromeDriver.exe, while running code, we have to let WebDriver about its path.
Instead of running chrome.exe from our system, we ask webDriver to run ChromeDriver.exe
For each browser, we need to take compatible version of its driver.
for eg: For chrome version 107, we need to download chrome driver version compatible for chrome 107
Basically we keep the chromeDriver.exe files inside project but we dont push them into git

In order to avoid compatibility issue, we have a concept called WebDriverManager

firefox - geckoDriver

************************************************************************

What is functional level testing and application level testing

We need to include application level testing in our functional level testing to make our testing better

For that, we use TestNG or Junit for validation

xpath practice

How to add selenium dependencies

How to download driver.exe file for chrome

Selenium Basic code - WebDriver methods 

get();
getTitle();
manage();
close();
quit();
getCurrentURL();
getPageSource();
findElement();
findElements();
navigate().to();


************************************************************************

Day 33 (05/09/2024)

WebDriver methods

getWindowHandle();
getWindowHandles();

switch to all Windows
close all windows 
switch to child window 
close all child window 
switch to desired window based on its title
switch to desired window based on element present in that page

**********************************************************************

Day 34 (08/09/2024)

Alerts 

Pop ups
	* Window based pop up (File upload window, enter password and user name)
	* Web based pop up (looks like web page but its a pop up)
	* Alert 
	
What is Alert:
	* It stops the web page flow.
	* You can not inspect Alert
	* Alert window does not have any url
	* Only after handling the alert, you can proceed with the page.
	* Alert does not have any handle ID.
	
How to handle Alert

	WebDriver interface
		* TargetLocator switchTo();
	
	TargetLocator interface
		* Alert alert();
		
	Alert interface 
		dismiss();
		accept();
		sendKeys();
		getText();
		
Types of alert
	* simple alert - informational alert
	* prompt alert - Need to pass some input as a text
	* confirmation alert - Yes/No
	
		
	
When we work on a website, if the alert comes, WebDriver lost its focus on the webpage.

Since we need to handle the alert first,  we need to switch the web driver focus from webpage to alert

1) When there is a alert in the flow but you missed to handle it - UnhandledAlertException
2) When there is no alert but you wrote a code to handle a alert - NoSuchAlertException


************************************************************************

Drop down handling using Selenium

There are two types 
	* Single selection
	* Multi selection
	
* How Dropdown are configured in a web page
	* By using select tag and options tag
		* index
		* value - attribute
		* text - attribute
		
	Selenium has a seperate class to handle select tag drop down
		* Select class
		* first locate the select  tag
		* Select select = new Select(WebElement); 
		
	* Other than select tags
	
**********************************************************************

Day 35 (09/09/2024)

Frame in selenium

Nested html page available inside original webpage - frame/iframe - tag names

<html>
<body>
<div>
	<ul>
		<li>
		<li>
	</ul>
	<iframe> 
		<html>
		<body>
			<span>
			</span>
		</body>
		</html>
	</iframe>
</div>
</body>
</html>

1) find the desired element
2) Check whether the element is present directly inside html or inside of any iframe/frame
3) if the element is present inside iframe/frame
	a) first locate the iframe/frame element
	b) switch into the iframe/frame --> driver.switchTo().frame(int index);
									-->  driver.switchTo().frame(String frameName);
									-->  driver.switchTo().frame(WebElement ele);
	c) to go back to the original html or parent iframe/frame
		--> driver.switchTo().defaultContent();
		
		
<html>
	<iframe>
		<frame>
				<div>
				
div - is our element 
	1) from here if you user driver.switchTo().parentFrame(); --> driver focus moves to <frame>
	2) from here if you user driver.switchTo().defaultContent(); --> driver focus moved to either <iframe> or <html>
	
Exception we encounter while working with frames or iframes
	* NoSuchElementException
	* NoSuchFrameException
	
	
**********************************************************************

Day 36 (11/09/2024)

Actions class in detail

**********************************************************************

Day 37 (12/09/2024)
	
Robot class in detail

How to access and automate Shadow Elements

getDriver() methods


**********************************************************************

Day 38 (14/09/2024)

Scrolling in Selenium 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Wait - Example 

TC01 - Verify that YAN shows only for Employee and not for managers

public void validateYAN(String employeeOrManagerUserID, String password) {

LaunchApplication(); //URL, your login details also was given in Property file
LoginUser(employeeOrManagerUserID, password); //in this method you find whether this user is manager or emp
ValidateYAN(employeeOrManagerUserID);

}

public void validateYAN(String employeeOrManagerUserID) {

switch(employeeOrManagerUserID) {
case "employee":
wait. for YAN to show()
break

case "Manager":
}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Screenshots in detail

**********************************************************************

Day 39 (16/09/2024)

WebTable in detail


*************************************************************************

Day 40 (17/09/2024)

validation in Selenium using TestNG

TestNG
* Its a multipurpose tool and also works as a framework
* We can use TestNG as a tool when we use Test Driven or Behaviour Driven frameworks
* TestNG gives you some annotations and tags, so that you can run your test cases easily 
* To work with TestNG in Eclipse, you need to install TestNG Eclipse plugin via market place 
* In order to use TestNG annotations and tags in your project, you need to add TestNG dependencies 

Official Documentation page: https://testng.org/doc/documentation-main.html

Main annotation of TestNG is @Test 
	* If we run a class using TestNG, then whatever methods represented as @Test will run
	* There are two way to run a class file using TestNG
		1) Simply right click on the class and Run as TestNG 
		2) Right click on the class from project path, Covert the class into TestNG. It will create a xml file. 
			By using the file we can run the class (recommended way)
Whenever we run as TestNG, 
	1) we get a basic report under test-output --> index.html
	2) we also get the recently failed test case details --> emailable-report.html
	3) For recently failed test cases, we get xml in testng-failed.xml


****************************************************************8
Day 41 (18/09/2024)

TestNG Annotations

STATE CM - ST CM

Order of annotation

@BeforeSuite
@BeforeTest
@BeforeClass
@BeforeMethod
@Test
@AfterMethod
@AfterClass
@AfterTest
@AfterSuite

priority = 1
enabled = true/false
always run = true/false
invocation count = 3
testng xml creation
	include and exclide methods

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Parameters
DataProviders
DependsOnMethods
Groups
DependsOnGroups



*****************************************************************
Day 42 (20/09/2024)

Framework in Selenium

Difference between Automation and Framework?
* Doing a work without manual effort is called - Automation
* Doing a same work by using a properly arranged structure of code.
	E.g: keep a separate class to read or write on excel, prop or config or text files
	
	* In Automation - duplicate codes, redundency of codes will be there

Page Object Model design pattern... 
	* each page - each java class
	* each class - find all the elements inside of it and store it in a variable with proper name. (Page Objects)
	* each class - find all the possible test cases and covert them into methods (Page Objects)
	* how do you differentiate pages in an application - if URL changes, its a new page

Test Driven
	* Data driven Framework
	* Keyword driven Framework
	* Hybrid framework
	
Tools - JUnit, TestNG

Behaviour Driven Framework
	* Cucumber along with JUnit/TestNG
	
When should we Automate
	* Web Application should be stable
	* Manual Test cases available - Manual understanding needed
	* In Manual Test cases 
		* What can be automated
		* What can not be automated
		* partially automated 
		* Manual intervention test cases
	* What are the regression Test cases, in that...
	* Define Complexity of Test cases 
		* Low 
		* Medium
		* High
		
Once we figure out the test cases

1) What technology we are going to use - Java, Python, Selenium, Playwrite, QTP
2) IDE - Eclipse, Visual Studio Code, InteliJ
3) Framework - Data driven (TestNG), Behaviour Driver (Cucumber = TestNG)
4) How do store data - Excel, Json, CSV
5) What are the standards we are going to follow
	* method naming
	* webElement naming
	
	
*****************************************************************
Day 43 (21/09/2024)

Homework - Create objects for OrangeHRM Pages

*****************************************************************
Day 43 (22/09/2024)
	
TestNG - Completed the Data driven framework with TestNG


*****************************************************************
Day 44 (23/09/2024)

Behaviour driven framework using Cucumber and Junit/TestNG (BDD Framework)

* Need to install cucumber plug in for Eclipse
* Need to add dependencies in your project 
	* Cucumber-Java
	* Cucumber-jvm
	* Cucumber-junit
	* Cucumber-core
* Make sure that, all the above 4 dependencies need to have same version.
* Right click on your project--> Configure ---> Convert to cucumber project 
* We can run Cucumber with Junit as well as TestNG tool. Most preferable is Junit 

* When we go for it? When our team has manual testers, Business Analyst
* When we create a framework, we have below files
	* Base class - where we initiate our driver, common methods 
	* Utilities class - where we have commonly used methods. Excel or prop file or DB reading
	* POM structure - separate class for each page (Page Object and Page factory)
	* Test case class 
	
* What are the 3 important files
	* Features folder (create inside test/resources folder.. eg. LoginPage.feature(file) ) - This is where we keep our test cases in simple english format(Gherkin language)
	* Step definition (Java file)
		* Java and selenium codes present in each pages class. 
		* Test cases present in feature files
		* Step definition files works as a link between coding and test cases
	* Runner (java file)
		* This is where our testing starts
		* feature file - path of specific file or features files folder
		* tag - test case tag name
		* Step def path - path of the specific step def or entire package name 
* Gherkin language
	* Given 
	* When 
	* Then
	* And
	* But

* Feature file
	* Feature 
	* Scenario (Test case)
	* How to pass parameters
	* Scenario Outline
	* Examples
	* Background

* Step definision
	* How to create it easily
	
* Runner file
	* This is where execution starts
	
Cucumber Structure

ProjectName
	src/main/java
	src/main/resources
	src/test/java
		Base package
			Base class - where we initiate web driver
		Utilities package
			Property reader class
			Excel reader class
			CSV file reader class
		Pages package (POM with Page objects and Page factory)
			Each pages class
		Step definition package
			Step definition files
		Runner package
			Runner files
	src/test/resources
		Features (folder)
			* Each feature files
			* property file
			* excel sheet 
			* Text files 
	drivers folder
		* Where we keep all the browser exe files
	target folder
		* This is where compile codes where present (.class file)
	test-output 
		* Reports
		* screenshots
	pom.xml
		* This is where we keep our dependencies for maven projects
	
Cucumber extent report 

**********************************************************

Agile



Two kind of methodology
1. Agile
2. Water fall.

Difference between waterfall and agile 

Agile methodology

key words 

Scrum time period or Agile time period  (Iteration)
	- one or two week or 15 days (Mostly its starts on Wednesday and ends with Tuesday)
	
an epic serves to manage tasks. It's a defined body of work that is segmented into specific tasks 
(called �stories,� or �user stories�) based on the needs/requests of customers or end-users


PI meeting - 
	High level team works on who will work on which changes and those changes will be split into small parts so that, 
	we can do that small work in one sprint time
	Duration: 4 hours to half a day 
	Attendee: Product Owner and Scrum master
	
Sprint Planning
	Task(User Stories) for small work is created, explained, assigned to a person, complexity will be decided
	Here complexity is called story point
	Basically story point is fibanocci series 1, 2, 3, 5, 8, 13.
	
	Inform your leave plan
	 
Daily Stand-Up
	What you did yesterday
	what are you going to do today 
	what is your plan for tomorrow
	Any risk on completing work
	
	leave details for unplanned or planned leave
	
Sprint Review/Demo
	Give prove it or demo on whatever stories you did on that sprint

Sprint Retrospective
	What went well and appreciations
	What need improvement
	
	
When there is a risk in completing a story
	E.g: Developer gives story to testing when there is only 3 days left. But in order to complete the testing you need 7 days
In this case
	1. No other choice you need to complete the testing in 3 days itself.
	2. Complete as much as possible, then create a new QA(Testing) story in next sprint
	3. Move the entire story from this sprint to next sprint
	4. Let your scrum master to ask for extension of the current sprint

*********************

Scrum

Teams in Scrum

Company - Wipro
client/Account - Alight
	* One Account can have multiple projects
Domain - Health & Welfare
Project - Bank of America
Project contains many teams and they are called scrum teams (POD)  

Consider client as your project team *****
Each POD is a scrum or agile team

Scrum Team 
	* Scrum Master - POD lead
	* Product Owner - BIM/BOM
	* New hire team config team
	* New hire testing team
	
Scrum team
	Product Owner(PO) - BIM or BOM
	Scrum master - Like lead but does only managerial work
	Devs(Onshore and offshore) - 
	Testers(Onshore and offshore)
	Business Tester if there is any
	
	In my team totally 12 members
	1. PO (client person)
	2. SM (from client or from our company)
	3. 2 dev in onsite (from client or from our company)
	4. 3 dev in offshore (from client or from our company)
	5. 3 Tester in offshore (You and other two) 
	6. 1 Tester in onshore (Testing lead)
	7. Business Tester or BA 
	
Company - Capgemini
Client - Fidelity 
Outsourcing their project to Capgemini
Chennai have fidelity office too. 
Project - Fidelity invesment
Our project have both Client team persons as well as Capgemini team persons

************************************************

Day to day life at work 

When do you automte 

How many test cases do you write on a day
	* where are we with the framework 
	* complexity of the test cases
	
Tell me about yourself
Explain your project 
day to day at office
Tell about your team








		

							
	
	
















	
	
	






	










	






		
	



	








		


